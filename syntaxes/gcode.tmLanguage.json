{
    "scopeName": "source.gcode",
    "name": "CNC Milling G-Code Snippet",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#speedsfeeds"
        },
        {
            "include": "#prognumbers"
        },
        {
            "include": "#coords"
        },
        {
            "include": "#tools"
        },
        {
            "include": "#modifiers"
        },
        {
            "include": "#macrovars"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.gcode",
                    "match": "(\\(.+\\))"
                },
                {
                    "name": "comment.gcode",
                    "begin": ";",
                    "end": "\\n"
                },
                {
                    "begin": "[\\/].*",
                    "end": "\\n"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "[gG][0-9]{1,3}",
                    "name": "markup.bold.gcode"
                },
                {
                    "match": "[mM][0-9]{1,3}",
                    "name": "keyword.operator.quantifier.regexp.gcode"
                },
                {
                    "match": "([\\%])",
                    "name": "string.gcode"
                },
                {
                    "match": "(GOTO)|(IF)|(EQ)|(NE)|(LT)|(GT)|(LE)|(GE)|(DO)|(WHILE)|(END)|(AND)|(OR)|(XOR)",
                    "name": "keyword.control.gcode"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "(SIN)|(COS)|(TAN)|(ASIN)|(ACOS)|(ATAN)|(LN)|(SQRT)|(MOD)|(EXP)",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(FIX)|(FUP)|(ROUND)|(ABS)",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(\\+)|(\\*)|(\\/)|(\\*\\*)",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(\\-)",
                    "name": "invalid.gcode"
                }
            ]
        },
        "speedsfeeds": {
            "patterns": [
                {
                    "match": "([sS])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.language.gcode"
                },
                {
                    "match": "([fF])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.language.gcode"
                }
            ]
        },
        "prognumbers": {
            "patterns": [
                {
                    "match": "[nN][0-9]+",
                    "name": "constant.numeric.gcode"
                },
                {
                    "match": "[oO][0-9]{1,5}",
                    "name": "string.regexp.gcode"
                },
                {
                    "match": "[pP][0-9]{1,5}",
                    "name": "string.regexp.gcode"
                }
            ]
        },
        "coords": {
            "patterns": [
                {
                    "match": "([xX])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "string.gcode"
                },
                {
                    "match": "([yY])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "string.gcode"
                },
                {
                    "match": "([zZ])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "invalid.gcode"
                },
                {
                    "match": "([aAbBcC])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.character.escape.gcode"
                }
            ]
        },
        "tools": {
            "patterns": [
                {
                    "match": "([dD])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.character.gcode"
                },
                {
                    "match": "([hH])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.character.gcode"
                },
                {
                    "match": "([tT])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.character.gcode"
                }
            ]
        },
        "modifiers": {
            "patterns": [
                {
                    "match": "([iIjJkK])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "constant.character.escape.gcode"
                },
                {
                    "match": "([qQrRlL])(?=-|\\d|\\[|#)-?(?:\\d+(?:\\.\\d*)?)?",
                    "name": "support.constant.math.gcode"
                }
            ]
        },
        "macrovars": {
            "patterns": [
                {
                    "match": "[#][0-9]+",
                    "name": "invalid.gcode"
                },
                {
                    "match": "#([\\[]#?[\\d]*\\.?[\\d]*([\\+\\-]#?[\\d]*\\.?[\\d]*)*[\\]])",
                    "name": "invalid.gcode"
                }

            ]
        }
    }

}